import { ILogger } from '@logger/contracts';
import { IResponseBuilder } from '@response-builder/contracts';
import { IErrorActions } from '@error-handler/contracts';
/**
 *
 * @template T The type of the response returned to the client.
 * @template R A response builder that implements `IResponseBuilder<T>`.
 *
 * Handles errors by delegating them to a specific error handler when available.
 *
 * This class tries to identify an appropriate handler among a predefined or custom set of handlers
 * (e.g., for DynamoDB, S3, Cognito) that can process the given error. If no suitable handler is found,
 * the error is logged and a generic internal server error response is returned.
 *
 * The constructor receives an object that implements the `IResponseBuilder<T>` interface,
 * which is responsible for building the response returned to the client. This approach makes
 * the `ErrorHandler` class flexible and reusable with different response types, depending on the context.
 *
 * @example
 * const errorHandler = new ErrorHandler<MyResponseType, MyResponseBuilder>(
 *   new MyResponseBuilder(),
 *   new MyLogger(),
 *   [new CustomErrorHandler()]
 * );
 * const response: MyResponseType = errorHandler.handleError(new Error('Some error occurred'));
 */
export declare class ErrorHandler<T, R extends IResponseBuilder<T>> {
    private readonly handlers;
    private readonly logger;
    private readonly resBuilder;
    /**
     * Creates an instance of the ErrorHandler.
     *
     * @param resBuilder - The response builder used to create error responses.
     * @param logger - Optional logger instance to log errors.
     * @param handlers - List of custom error handlers to process errors.
     */
    constructor(resBuilder: R, logger: ILogger<any>, handlers: IErrorActions<T, R>[]);
    /**
     * Handles errors by finding the appropriate handler from the list of registered handlers.
     * If a handler is found, it processes the error and returns a response.
     * If no handler is found, it logs the error and returns a generic internal error response.
     *
     * @param error - The error to be handled.
     * @returns The response generated by the handler, or a generic error response.
     *
     * @example
     * const response = errorHandler.handleError(new Error('Some error occurred'));
     */
    handleError(error: Error): T;
}
//# sourceMappingURL=error-handler.d.ts.map